<?xml version="1.0"?>
<doc>
    <assembly>
        <name>artemis</name>
    </assembly>
    <members>
        <member name="T:Artemis.Aspect">
            <summary>
            Especify a Filter to filter what Entities (with what Components) a EntitySystem will Process
            </summary>
        </member>
        <member name="M:Artemis.Aspect.Interests(Artemis.Entity)">
            <summary>
            Called by the EntitySystem to determine if the system is interested in the passed Entity
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.InitialSize">
            <summary>
            Initial size of the Pool
            Default 10
            </summary>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.ResizeSize">
            <summary>
            The size of the pool resize        
            Default 10
            </summary>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.isSupportMultiThread">
            <summary>
            Gets or sets a value indicating whether this instance should support multi thread environemnt
            Default false
            </summary>
            <value>
            <c>true</c> if this instance should support multi thread environemnt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Artemis.Attributes.ArtemisComponentPool.Resizes">
            <summary>
            If the pool can be resized
            Default False
            </summary>
        </member>
        <member name="T:Artemis.Component">
            <summary>
            Empty Interface that all Components must extend
            </summary>
        </member>
        <member name="T:Artemis.ComponentMapper`1">
            <summary>
            Fastest Way to get Components from entities
            </summary>
        </member>
        <member name="M:Artemis.ComponentMapper`1.#ctor(Artemis.EntityWorld)">
            <summary>
            Creates a component mapper within the given Entity World
            </summary>
            <param name="world">EntityWorld</param>
        </member>
        <member name="M:Artemis.ComponentMapper`1.Get(Artemis.Entity)">
            <summary>
            Gets the component for the given entity/component type combo
            </summary>
            <param name="e">Entity in which you are interested</param>
            <returns>Component</returns>
        </member>
        <member name="M:Artemis.ComponentMapper`1.GetComponentMapperFor``1(``0,Artemis.EntityWorld)">
            <summary>
            Creates a ComponentMapper for a Type
            </summary>
            <typeparam name="K"></typeparam>
            <param name="type"></param>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="T:Artemis.ComponentType">
            <summary>
            Represents a Component Type
            </summary>
        </member>
        <member name="P:Artemis.ComponentType.Bit">
            <summary>
            The unique Bit representation of a type
            </summary>
        </member>
        <member name="P:Artemis.ComponentType.Id">
            <summary>
            The unique integer representing a type
            </summary>
        </member>
        <member name="M:Artemis.ComponentTypeManager.GetTypeFor``1">
            <summary>
            Get the component type for the given component instance
            </summary>
            <typeparam name="T">Component for which you want the component type</typeparam>
            <returns>Component Type</returns>
        </member>
        <member name="M:Artemis.ComponentTypeManager.GetTypeFor(System.Type)">
            <summary>
            Ensure the given component type [tag] is an "official" component type for your solution
            If it does not already exist, add it to the bag of available component types
            This is a way you can easily add "official" component types to your solution
            </summary>
            <param name="component">The component type label you want to ensure is an "official" component type</param>
            <returns>ComponentType</returns>
        </member>
        <member name="T:Artemis.MultiThreadComponentPool`1">
            <summary>
            A collection that maintains a set of class instances to allow for recycling
            instances and minimizing the effects of garbage collection.
            </summary>
            <typeparam name="T">The type of object to store in the Pool. Pools can only hold class types.</typeparam>
        </member>
        <member name="M:Artemis.MultiThreadComponentPool`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Func{System.Type,`0},System.Type)">
            <summary>
            Creates a new pool with a specific starting size.
            </summary>
            <param name="initialSize">The initial size of the pool.</param>
            <param name="resizePool">The resize pool size.</param>
            <param name="resizes">Whether or not the pool is allowed to increase its size as needed.</param>
            <param name="allocateFunc">A function used to allocate an instance for the pool.</param>
            <param name="innerType">Type ComponentPoolable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">initialSize;initialSize must be at least 1.</exception>
            <exception cref="T:System.ArgumentNullException">allocateFunc</exception>
        </member>
        <member name="M:Artemis.MultiThreadComponentPool`1.ReturnObject(`0)">
            <summary>
            Return an object to the pool
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Artemis.MultiThreadComponentPool`1.CleanUp">
            <summary>
            Cleans up the pool by checking each valid object to ensure it is still actually valid.
            Must be called regularly to free returned Objects
            </summary>
        </member>
        <member name="M:Artemis.MultiThreadComponentPool`1.New">
            <summary>
            Returns a new object from the Pool.
            </summary>
            <returns>The next object in the pool if available, null if all instances are valid.</returns>
        </member>
        <member name="P:Artemis.MultiThreadComponentPool`1.ValidCount">
            <summary>
            Gets the number of valid objects in the pool.
            </summary>
        </member>
        <member name="P:Artemis.MultiThreadComponentPool`1.InvalidCount">
            <summary>
            Gets the number of invalid objects in the pool.
            </summary>
        </member>
        <member name="P:Artemis.MultiThreadComponentPool`1.Item(System.Int32)">
            <summary>
            Returns a valid object at the given index. The index must fall in the range of [0, ValidCount].
            </summary>
            <param name="index">The index of the valid object to get</param>
            <returns>A valid object found at the index</returns>
        </member>
        <member name="T:Artemis.EntitySystem">
            <summary>
            Base of all Entity Systems
            Provide basic funcionalities
            </summary>
        </member>
        <member name="M:Artemis.EntitySystem.Begin">
            Called before processing of entities begins. 
        </member>
        <member name="M:Artemis.EntitySystem.End">
            Called after the processing of entities ends.
        </member>
        <member name="M:Artemis.EntitySystem.ProcessEntities(System.Collections.Generic.Dictionary{System.Int32,Artemis.Entity})">
            Any implementing entity system must implement this method and the logic
            to process the given entities of the system.
            
            @param entities the entities this system contains.
        </member>
        <member name="M:Artemis.EntitySystem.CheckProcessing">
            
            @return true if the system should be processed, false if not.
        </member>
        <member name="M:Artemis.EntitySystem.Initialize">
            Override to implement code that gets executed when systems are initialized.
        </member>
        <member name="M:Artemis.EntitySystem.OnAdded(Artemis.Entity)">
            Called if the system has received a entity it is interested in, e.g. created or a component was added to it.
            @param e the entity that was added to this system.
        </member>
        <member name="M:Artemis.EntitySystem.OnRemoved(Artemis.Entity)">
            Called if a entity was removed from this system, e.g. deleted or had one of it's components removed.
            @param e the entity that was removed from this system.
        </member>
        <member name="M:Artemis.EntitySystem.GetMergedTypes(System.Type,System.Type[])">
            Merge together a required type and a array of other types. Used in derived systems.
            @param requiredType
            @param otherTypes
            @return
        </member>
        <member name="M:Artemis.DelayedEntitySystem.ProcessEntities(System.Collections.Generic.Dictionary{System.Int32,Artemis.Entity},System.Single)">
            The entities to process with accumulated delta.
            @param entities read-only bag of entities.
        </member>
        <member name="M:Artemis.DelayedEntitySystem.StartDelayedRun(System.Single)">
            Start processing of entities after a certain amount of milliseconds.
            
            Cancels current delayed run and starts a new one.
            
            @param delay time delay in milliseconds until processing starts.
        </member>
        <member name="M:Artemis.DelayedEntitySystem.IsRunning">
            Check if the system is counting down towards processing.
            
            @return true if it's counting down, false if it's not running.
        </member>
        <member name="M:Artemis.DelayedEntitySystem.Stop">
            Aborts running the system in the future and stops it. Call delayedRun() to start it again.
        </member>
        <member name="P:Artemis.DelayedEntitySystem.InitialTimeDelay">
            Get the initial delay that the system was ordered to process entities after.
            
            @return the originally set delay.
        </member>
        <member name="M:Artemis.DelayedEntityProcessingSystem.#ctor(System.Type,System.Type[])">
            <summary>
            Create a new DelayedEntityProcessingSystem. It requires at least one component.
            </summary>
            <param name="requiredType">The required component type.</param>
            <param name="otherTypes">Other component types.</param>
        </member>
        <member name="M:Artemis.DelayedEntityProcessingSystem.#ctor(Artemis.Aspect)">
            <summary>
            Create a new DelayedEntityProcessingSystem. It requires an Aspect
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:Artemis.DelayedEntityProcessingSystem.Process(Artemis.Entity,System.Single)">
            <summary>
            Process an entity this system is interested in.
            </summary>
            <param name="e"></param>
            <param name="accumulatedDelta">The entity to process.</param>
        </member>
        <member name="M:Artemis.DelayedEntityProcessingSystem.ProcessEntities(System.Collections.Generic.Dictionary{System.Int32,Artemis.Entity},System.Single)">
            <summary>
            Process all entities with the delayed Entity processing system
            </summary>
            <param name="entities">Entities to process</param>
            <param name="accumulatedDelta">Total Delay</param>
        </member>
        <member name="T:Artemis.Entity">
            <summary>
            Basic Unity of an Entity System
            </summary>
        </member>
        <member name="M:Artemis.Entity.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Artemis.Entity.AddComponent(Artemis.Component)">
            Add a component to this entity.
            @param component to add to this entity
        </member>
        <member name="M:Artemis.Entity.RemoveComponent``1">
            <summary>
            Remove Component frmo this entity
            </summary>
            <typeparam name="T">Component Type</typeparam>
        </member>
        <member name="M:Artemis.Entity.RemoveComponent(Artemis.ComponentType)">
            Faster removal of components from a entity.
            @param component to remove from this entity.
        </member>
        <member name="M:Artemis.Entity.GetComponent(Artemis.ComponentType)">
             This is the preferred method to use when retrieving a component from a entity. It will provide good performance.
            
             @param type in order to retrieve the component fast you must provide a ComponentType instance for the expected component.
             @return
        </member>
        <!-- Badly formed XML comment ignored for member "M:Artemis.Entity.GetComponent``1" -->
        <member name="M:Artemis.Entity.HasComponent``1">
            <summary>
            Determines whether this instance has a specific component.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
              <c>true</c> if this instance has a specific component; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Artemis.Entity.Refresh">
            Refresh all changes to components for this entity. After adding or removing components, you must call
            this method. It will update all relevant systems.
            It is typical to call this after adding components to a newly created entity.
        </member>
        <member name="M:Artemis.Entity.Delete">
            Delete this entity from the world.
        </member>
        <member name="P:Artemis.Entity.Id">
             The internal id for this entity within the framework. No other entity will have the same ID, but
             ID's are however reused so another entity may acquire this ID if the previous entity was deleted.
            
             @return id of the entity.
        </member>
        <member name="P:Artemis.Entity.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Artemis.Entity"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Artemis.Entity.isActive">
            Checks if the entity has been deleted from somewhere.
            @return if it's active.
        </member>
        <member name="P:Artemis.Entity.Components">
            Get all components belonging to this entity.
            WARNING. Use only for debugging purposes, it is dead slow.
            WARNING. The returned bag is only valid until this method is called again, then it is overwritten.
            @return all components of this entity.
        </member>
        <member name="P:Artemis.Entity.Group">
            Set the group of the entity. Same as World.setGroup().
            @param group of the entity.
        </member>
        <member name="P:Artemis.Entity.Tag">
            Assign a tag to this entity. Same as World.setTag().
            @param tag of the entity.
        </member>
        <member name="T:Artemis.EntityManager">
            <summary>
            Entity Manager
            </summary>
        </member>
        <member name="M:Artemis.EntityManager.#ctor(Artemis.EntityWorld)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.EntityManager"/> class.
            </summary>
            <param name="world">The world.</param>
        </member>
        <member name="M:Artemis.EntityManager.Create">
            <summary>
            Create a new, "blank" entity
            </summary>
            <returns>New entity</returns>
        </member>
        <member name="M:Artemis.EntityManager.Remove(Artemis.Entity)">
            <summary>
            Remove an entity from the world
            </summary>
            <param name="e">Entity you want to remove</param>
        </member>
        <member name="M:Artemis.EntityManager.RemoveComponentsOfEntity(Artemis.Entity)">
            <summary>
            Strips all components from the given entity
            </summary>
            <param name="e">Entity for which you want to remove all components</param>
        </member>
        <member name="M:Artemis.EntityManager.IsActive(System.Int32)">
            <summary>
            Check if this entity is active, or has been deleted, within the framework.
            </summary>
            <param name="entityId">entityId</param>
            <returns>active or not.</returns>
        </member>
        <member name="M:Artemis.EntityManager.AddComponent(Artemis.Entity,Artemis.Component)">
            <summary>
            Add the given component to the given entity
            </summary>
            <param name="e">Entty for which you want to add the component</param>
            <param name="component">Component you want to add</param>
        </member>
        <member name="M:Artemis.EntityManager.AddComponent``1(Artemis.Entity,Artemis.Component)">
            <summary>
            Add a component to the given entity
            If the component's type does not already exist, add it to the bag of availalbe component types
            </summary>
            <typeparam name="T">Component type you want to add</typeparam>
            <param name="e">The entity to which you want to add the component</param>
            <param name="component">The component instance you want to add</param>
        </member>
        <member name="M:Artemis.EntityManager.Refresh(Artemis.Entity)">
            <summary>
            Ensure the any changes to components are synced up with the entity - ensure systems "see" all components
            </summary>
            <param name="e">The entity whose components you want to refresh</param>
        </member>
        <member name="M:Artemis.EntityManager.RemoveComponent``1(Artemis.Entity,Artemis.Component)">
            <summary>
            Removes the given component from the given entity
            </summary>
            <typeparam name="T">The type of the component you want to remove</typeparam>
            <param name="e">The entity for which you are removing the component</param>
            <param name="component">The specific component instance you want removed</param>
        </member>
        <member name="M:Artemis.EntityManager.RemoveComponent``1(Artemis.Entity,Artemis.ComponentType)">
            <summary>
            Removes the given component type from the given entity
            </summary>
            <typeparam name="T">The type of the component you want to remove</typeparam>
            <param name="e">The entity for which you are removing the component</param>
            <param name="component">The specific component type you want removed</param>
        </member>
        <member name="M:Artemis.EntityManager.RemoveComponent(Artemis.Entity,Artemis.ComponentType)">
            <summary>
            Reemoves the given component type from the given entity
            </summary>
            <param name="e">The entity for which you want to remove the component</param>
            <param name="type">The component type you want to remove</param>
        </member>
        <member name="M:Artemis.EntityManager.GetComponent(Artemis.Entity,Artemis.ComponentType)">
            <summary>
            Get the component instance of the given component type for the given entity
            </summary>
            <param name="e">The entity for which you want to get the component</param>
            <param name="type">The desired component type</param>
            <returns>Component instance</returns>
        </member>
        <member name="M:Artemis.EntityManager.GetEntity(System.Int32)">
            <summary>
            Get the entity for the given entityId
            </summary>
            <param name="entityId">Desired EntityId</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Artemis.EntityManager.GetComponents(Artemis.Entity)">
            <summary>
            Get all components assigned to an entity
            </summary>
            <param name="e">Entity for which you want the components</param>
            <returns>Bag of components</returns>
        </member>
        <member name="P:Artemis.EntityManager.ActiveEntitiesCount">
            <summary>
            Get how many entities are currently active
            </summary>
            <returns>How many entities are currently active</returns>
        </member>
        <member name="P:Artemis.EntityManager.TotalCreated">
            <summary>
            Get how many entities have been created since start.
            </summary>
            <returns>The total number of entities created</returns>
        </member>
        <member name="P:Artemis.EntityManager.TotalRemoved">
            <summary>
            Gets how many entities have been removed since start.
            </summary>
            <returns>The total number of removed entities</returns>
        </member>
        <member name="P:Artemis.EntityManager.ActiveEntities">
            <summary>
            Get all active Entities
            </summary>
            <returns>Bag of active entities</returns>
        </member>
        <member name="M:Artemis.EntityProcessingSystem.#ctor(System.Type,System.Type[])">
            Create a new EntityProcessingSystem. It requires at least one component.
            @param requiredType the required component type.
            @param otherTypes other component types.
        </member>
        <member name="M:Artemis.EntityProcessingSystem.Process(Artemis.Entity)">
            Process a entity this system is interested in.
            @param e the entity to process.
        </member>
        <member name="M:Artemis.GroupManager.Set(System.String,Artemis.Entity)">
            Set the group of the entity.
            
            @param group group to set the entity into.
            @param e entity to set into the group.
        </member>
        <member name="M:Artemis.GroupManager.GetEntities(System.String)">
            Get all entities that belong to the provided group.
            @param group name of the group.
            @return read-only bag of entities belonging to the group.
        </member>
        <member name="M:Artemis.GroupManager.Remove(Artemis.Entity)">
            <summary>
            Removes an entity from the group it is assigned to, if any.
            </summary>
            <param name="e">The entity to be removed</param>
        </member>
        <member name="M:Artemis.GroupManager.GetGroupOf(Artemis.Entity)">
            @param e entity
            @return the name of the group that this entity belongs to, null if none.
        </member>
        <member name="M:Artemis.GroupManager.IsGrouped(Artemis.Entity)">
            Checks if the entity belongs to any group.
            @param e the entity to check.
            @return true if it is in any group, false if none.
        </member>
        <member name="M:Artemis.IntervalEntityProcessingSystem.#ctor(System.Int32,System.Type,System.Type[])">
            Create a new IntervalEntityProcessingSystem. It requires at least one component.
            @param requiredType the required component type.
            @param otherTypes other component types.
        </member>
        <member name="M:Artemis.IntervalEntityProcessingSystem.Process(Artemis.Entity)">
            Process a entity this system is interested in.
            @param e the entity to process.
        </member>
        <member name="M:Artemis.ParallelEntityProcessingSystem.#ctor(System.Type,System.Type[])">
            Create a new EntityProcessingSystem. It requires at least one component.
            @param requiredType the required component type.
            @param otherTypes other component types.
        </member>
        <member name="M:Artemis.ParallelEntityProcessingSystem.Process(Artemis.Entity)">
            Process a entity this system is interested in.
            @param e the entity to process.
        </member>
        <member name="T:Artemis.ComponentPool`1">
            <summary>
            A collection that maintains a set of class instances to allow for recycling
            instances and minimizing the effects of garbage collection.
            </summary>
            <typeparam name="T">The type of object to store in the Pool. Pools can only hold class types.</typeparam>
        </member>
        <member name="M:Artemis.ComponentPool`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Func{System.Type,`0},System.Type)">
            <summary>
            Creates a new pool with a specific starting size.
            </summary>
            <param name="initialSize">The initial size of the pool.</param>
            <param name="resizePool">The resize pool size.</param>
            <param name="resizes">Whether or not the pool is allowed to increase its size as needed.</param>
            <param name="allocateFunc">A function used to allocate an instance for the pool.</param>
            <param name="innerType">Type ComponentPoolable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">initialSize;initialSize must be at least 1.</exception>
            <exception cref="T:System.ArgumentNullException">allocateFunc</exception>
        </member>
        <member name="M:Artemis.ComponentPool`1.ReturnObject(`0)">
            <summary>
            Return an object to the pool
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Artemis.ComponentPool`1.CleanUp">
            <summary>
            Cleans up the pool by checking each valid object to ensure it is still actually valid.
            Must be called regularly to free returned Objects
            </summary>
        </member>
        <member name="M:Artemis.ComponentPool`1.New">
            <summary>
            Returns a new object from the Pool.
            </summary>
            <returns>The next object in the pool if available, null if all instances are valid.</returns>
        </member>
        <member name="P:Artemis.ComponentPool`1.ValidCount">
            <summary>
            Gets the number of valid objects in the pool.
            </summary>
        </member>
        <member name="P:Artemis.ComponentPool`1.InvalidCount">
            <summary>
            Gets the number of invalid objects in the pool.
            </summary>
        </member>
        <member name="P:Artemis.ComponentPool`1.Item(System.Int32)">
            <summary>
            Returns a valid object at the given index. The index must fall in the range of [0, ValidCount].
            </summary>
            <param name="index">The index of the valid object to get</param>
            <returns>A valid object found at the index</returns>
        </member>
        <member name="T:Artemis.QueueSystemProcessing">
            <summary>
            System Not based On Components
            It Process ONCE everything you explicitely add to it using the method AddToQueue
            </summary>
        </member>
        <member name="T:Artemis.QueueSystemProcessingThreadSafe">
            <summary>
            System Not based On Components
            It Process ONCE everything you explicitely add to it using the method AddToQueue
            </summary>
        </member>
        <member name="M:Artemis.SystemManager.InitializeAll(System.Boolean)">
            After adding all systems to the world, you must initialize them all.
        </member>
        <member name="T:Artemis.TagSystem">
            <summary>
            Tag System does not fire ANY Events of the EntitySystem
            </summary>
        </member>
        <member name="M:Artemis.TagSystem.Process(Artemis.Entity)">
            Process a entity this system is interested in.
            @param e the entity to process.
        </member>
        <member name="T:Artemis.EntityWorld">
            <summary>
            Entity World Class
            Main interface of the Entity System
            </summary>
        </member>
        <member name="M:Artemis.EntityWorld.DeleteEntity(Artemis.Entity)">
            Delete the provided entity from the world.
            @param e entity
        </member>
        <member name="M:Artemis.EntityWorld.RefreshEntity(Artemis.Entity)">
            Ensure all systems are notified of changes to this entity.
            @param e entity
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntity">
            Create and return a new or reused entity instance.
            @return entity
        </member>
        <member name="M:Artemis.EntityWorld.SetPool(System.Type,Artemis.IComponentPool{Artemis.ComponentPoolable})">
            <summary>
            Sets the pool for a specific type
            </summary>
            <param name="type">The type.</param>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:Artemis.EntityWorld.GetPool(System.Type)">
            <summary>
            Gets the pool for a Type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.EntityWorld.InitializeAll(System.Boolean)">
            <summary>
            Initialize the World
            </summary>
            <param name="processAttributes"></param>
        </member>
        <member name="M:Artemis.EntityWorld.GetComponentFromPool(System.Type)">
            <summary>
            Gets a component from a pool.
            </summary>
            <param name="type">The typeof the object to get</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.EntityWorld.GetComponentFromPool``1">
            <summary>
            Gets the component from pool.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns></returns>
        </member>
        <member name="M:Artemis.EntityWorld.CreateEntityFromTemplate(System.String,System.Object[])">
            <summary>
            Creates a entity from template.
            </summary>
            <param name="entityTemplateTag">The entity template tag.</param>
            <param name="templateArgs">The template args.</param>
            <returns></returns>
        </member>
        <member name="M:Artemis.EntityWorld.GetEntity(System.Int32)">
            Get a entity having the specified id.
            @param entityId
            @return entity
        </member>
        <member name="M:Artemis.EntityWorld.Update(System.Single,Artemis.ExecutionType)">
            <summary>
            Updates the World
            </summary>
            <param name="executionType">Type of the execution.</param>
            <param name="elapsedTime">The elapsed TIME in milliseconds.</param>
        </member>
        <member name="M:Artemis.EntityWorld.LoadEntityState(System.String,System.String,Artemis.Bag{Artemis.Component},System.Object[])">
            <summary>
            Loads the state of the entity.
            </summary>
            <param name="templateTag">The template tag. Can be null</param>
            <param name="groupName">Name of the group. Can be null</param>
            <param name="components">The components.</param>
            <param name="templateArgs">Params for entity template</param>
        </member>
        <member name="P:Artemis.EntityWorld.PoolCleanupDelay">
            <summary>
            Interval in FrameUpdates between pools cleanup
            Default 10
            </summary>
        </member>
        <member name="P:Artemis.EntityWorld.GroupManager">
            <summary>
            Gets the group manager.
            </summary>
            <value>
            The group manager.
            </value>
        </member>
        <member name="P:Artemis.EntityWorld.SystemManager">
            <summary>
            Gets the system manager.
            </summary>
            <value>
            The system manager.
            </value>
        </member>
        <member name="P:Artemis.EntityWorld.EntityManager">
            <summary>
            Gets the entity manager.
            </summary>
            <value>
            The entity manager.
            </value>
        </member>
        <member name="P:Artemis.EntityWorld.TagManager">
            <summary>
            Gets the tag manager.
            </summary>
            <value>
            The tag manager.
            </value>
        </member>
        <member name="P:Artemis.EntityWorld.ElapsedTime">
            Time since last game loop.
            @return delta in milliseconds.
        </member>
        <member name="P:Artemis.EntityWorld.CurrentState">
            <summary>
            Gets the current state of the workd.
            </summary>
            <value>
            The state of the current.
            </value>
        </member>
        <member name="M:Artemis.Bag`1.#ctor">
            Constructs an empty Bag with an initial capacity of 16.
            
        </member>
        <member name="M:Artemis.Bag`1.#ctor(System.Int32)">
            Constructs an empty Bag with the specified initial capacity.
            
            @param capacity
                       the initial capacity of Bag
        </member>
        <member name="M:Artemis.Bag`1.Remove(System.Int32)">
            Removes the element at the specified position in this Bag. does this by
            overwriting it was last element then removing last element
            
            @param index
                       the index of element to be removed
            @return element that was removed from the Bag
        </member>
        <member name="M:Artemis.Bag`1.RemoveLast">
            Remove and return the last object in the bag.
            
            @return the last object in the bag, null if empty.
        </member>
        <member name="M:Artemis.Bag`1.Remove(`0)">
            Removes the first occurrence of the specified element from this Bag, if
            it is present. If the Bag does not contain the element, it is unchanged.
            does this by overwriting it was last element then removing last element
            
            @param o
                       element to be removed from this list, if present
            @return <tt>true</tt> if this list contained the specified element
        </member>
        <member name="M:Artemis.Bag`1.Contains(`0)">
            Check if bag contains this element.
            
            @param o
            @return
        </member>
        <member name="M:Artemis.Bag`1.RemoveAll(Artemis.Bag{`0})">
            Removes from this Bag all of its elements that are contained in the
            specified Bag.
            
            @param bag
                       Bag containing elements to be removed from this Bag
            @return {@code true} if this Bag changed as a result of the call
        </member>
        <member name="M:Artemis.Bag`1.Get(System.Int32)">
            Returns the element at the specified position in Bag.
            
            @param index
                       index of the element to return
            @return the element at the specified position in bag
        </member>
        <member name="M:Artemis.Bag`1.Add(`0)">
            Adds the specified element to the end of this bag. if needed also
            increases the capacity of the bag.
            
            @param o
                       element to be added to this list
        </member>
        <member name="M:Artemis.Bag`1.Set(System.Int32,`0)">
            Set element at specified index in the bag.
            
            @param index position of element
            @param o the element
        </member>
        <member name="M:Artemis.Bag`1.Clear">
            Removes all of the elements from this bag. The bag will be empty after
            this call returns.
        </member>
        <member name="M:Artemis.Bag`1.AddAll(Artemis.Bag{`0})">
            Add all items into this bag. 
            @param added
        </member>
        <member name="P:Artemis.Bag`1.Item(System.Int32)">
            <summary>
            Returns the element at the specified position in Bag.
            </summary>
            <param name="index">index of the element to return</param>
            <returns>the element at the specified position in Bag</returns>
        </member>
        <member name="P:Artemis.Bag`1.Size">
            Returns the number of elements in this bag.
            
            @return the number of elements in this bag
        </member>
        <member name="P:Artemis.Bag`1.Capacity">
            Returns the number of elements the bag can hold without growing.
            
            @return the number of elements the bag can hold without growing.
        </member>
        <member name="P:Artemis.Bag`1.IsEmpty">
            Returns true if this list contains no elements.
            
            @return true if this list contains no elements
        </member>
    </members>
</doc>
